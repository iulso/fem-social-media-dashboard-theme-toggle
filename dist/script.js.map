{"version":3,"sources":["script.js"],"names":["document","documentElement","classList","remove","body","querySelector","toggleInputs","querySelectorAll","lightButton","getElementById","darkButton","setColorMode","el","theme","localStorage","setItem","getLocalColorMode","getItem","getPreferencesColorMode","window","matchMedia","matches","loadTheme","click","forEach","input","addEventListener","e","checked"],"mappings":"AAAA,aACAA,SAASC,gBAAgBC,UAAUC,OAAO,SAa1C,IAAMC,KAAOJ,SAASK,cAAc,QAC9BC,aAAeN,SAASO,iBAAiB,0BACzCC,YAAcR,SAASS,eAAe,SACtCC,WAAaV,SAASS,eAAe,QAMrCE,aAAe,SAACC,EAAIC,GACxBD,EAAGV,UAAYW,EACfC,aAAaC,QAAQ,YAAaF,EACpC,EAEMG,kBAAoB,WACxB,OAAOF,aAAaG,QAAQ,YAC9B,EAEMC,wBAA0B,WAC9B,OAAOC,OAAOC,WAAW,gCAAgCC,QACrD,OACA,OACN,EAEMC,UAAY,WAGN,UADIN,qBAAuBE,2BAClBR,WAAWa,QAAUf,YAAYe,OACtD,EAGAjB,aAAakB,SAAQ,SAAAC,GACnBA,EAAMC,iBAAiB,SAAS,SAAAC,GAC9BjB,WAAWkB,QACPjB,aAAaP,KAAM,QACnBO,aAAaP,KAAM,QACzB,GACF,IAMAe,OACGC,WAAW,gCACXM,iBAAiB,UAAU,SAAAC,GAC1BA,EAAEN,QAAUX,WAAWa,QAAUf,YAAYe,OAC/C,IAGFD","file":"script.js","sourcesContent":["// Remove the no-js class so that the toggle will show\ndocument.documentElement.classList.remove('no-js');\n\n/* \nThe first time the page is loaded, the color mode set on the preference \nis used and set as 'default' in the localStorage. \nChanging the default preferences works the same way as changing the \ncolor mode using the buttons, if the page is loaded.\nWhen the page is reloaded, whatever is the value set on the localStorage\nhas precedence over the values in the preference. If the preference\nchanged after the page was visited -and the page is not loaded- \nthe last value saved on the localStorage is loaded. \n*/\n\nconst body = document.querySelector('body');\nconst toggleInputs = document.querySelectorAll('.toggle__wrapper input');\nconst lightButton = document.getElementById('light');\nconst darkButton = document.getElementById('dark');\n\n/**\n * Pass an element and a theme name.\n * The theme will be added as a class to the element and set in localStorage\n */\nconst setColorMode = (el, theme) => {\n  el.classList = theme;\n  localStorage.setItem('colorMode', theme);\n};\n\nconst getLocalColorMode = () => {\n  return localStorage.getItem('colorMode');\n};\n\nconst getPreferencesColorMode = () => {\n  return window.matchMedia('(prefers-color-scheme: dark)').matches\n    ? 'dark'\n    : 'light'; // If preference is set or does not match anything (light is default)\n};\n\nconst loadTheme = () => {\n  // localStorage has precendence over the 'prefers-color-scheme'\n  const color = getLocalColorMode() || getPreferencesColorMode();\n  color === 'dark' ? darkButton.click() : lightButton.click();\n};\n\n// When the toggle inputs are clicked, check which one is checked and change the color\ntoggleInputs.forEach(input => {\n  input.addEventListener('click', e => {\n    darkButton.checked\n      ? setColorMode(body, 'dark')\n      : setColorMode(body, 'light');\n  });\n});\n\n/**\n * This event will be emitted when the 'prefers-color-scheme' changes\n * If it matches, the new color is dark, else it is light\n */\nwindow\n  .matchMedia('(prefers-color-scheme: dark)')\n  .addEventListener('change', e => {\n    e.matches ? darkButton.click() : lightButton.click();\n  });\n\n// Load the right theme on startup - localStorage has precedence\nloadTheme();\n"]}